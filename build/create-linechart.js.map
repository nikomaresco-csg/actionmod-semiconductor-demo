{
  "version": 3,
  "sources": ["../src/utils/library.ts", "../src/utils/data.ts", "../src/scripts/create-linechart.ts"],
  "sourcesContent": ["\r\n\r\n/*\r\n* attempts to verify that the Spotfire Analyst client is connected to a Spotfire Server\r\n*\r\n* @param application - the current application context\r\n* @returns true if the client is connected to a server, false otherwise\r\n*/\r\nexport function checkServerConnection(\r\n    application: Spotfire.Dxp.Application.AnalysisApplication\r\n): boolean {\r\n    const connectivityService = application.GetService(\r\n        Spotfire.Dxp.Framework.ApplicationModel.ConnectivityService\r\n    );\r\n    if (connectivityService == null || !connectivityService)\r\n        return false;\r\n    return connectivityService.IsOnline;\r\n}\r\n\r\n/*\r\n* attempts to get a LibraryItem with the given path and type from the Spotfire,\r\n* Library. throws an error if the item is not found.\r\n*\r\n* @param lm - the LibraryManager to use to look up the item. get with `application.GetService(LibraryManager)`\r\n* @param itemPath - the path to the item in the Library\r\n* @param itemType - the type of the item to look up\r\n* @returns the LibraryItem with the given path and type\r\n*/\r\nexport function getLibraryItem(\r\n    lm: Spotfire.Dxp.Framework.Library.LibraryManager,\r\n    itemPath: string,\r\n    itemType: Spotfire.Dxp.Framework.Library.LibraryItemType\r\n): Spotfire.Dxp.Framework.Library.LibraryItem {\r\n    const item = OutParam.create(Spotfire.Dxp.Framework.Library.LibraryItem);\r\n    if (!lm.TryGetItem(itemPath, itemType, item.out)) {\r\n        throw new Error(`Library item not found: ${itemPath}`);\r\n    }\r\n    return item;\r\n}\r\n\r\n/*\r\n* attempts to get a ColorScheme from the Spotfire Library with the given path\r\n*\r\n* @param application - the current application context\r\n* @param libraryPath - the path to the ColorScheme in the Library\r\n* @returns the ColorScheme with the given path\r\n*/\r\nexport function getColorSchemeFromLibrary(\r\n    application: Spotfire.Dxp.Application.AnalysisApplication,\r\n    libraryPath: string\r\n): Spotfire.Dxp.Framework.Library.LibraryItem {\r\n    if (!checkServerConnection(application)) {\r\n        throw new Error(\"Cannot access library when not connected to a server\");\r\n    }\r\n\r\n    const libraryManager = application.GetService(Spotfire.Dxp.Framework.Library.LibraryManager);\r\n    if (libraryManager == null || !libraryManager) {\r\n        throw new Error(\"LibraryManager service not available\");\r\n    }\r\n\r\n    return getLibraryItem(\r\n        libraryManager,\r\n        libraryPath,\r\n        Spotfire.Dxp.Framework.Library.LibraryItemType.ColorScheme\r\n    );\r\n}\r\n\r\n/*\r\n* attempts to get a ColorScheme from the current document with the given name\r\n*\r\n* @param document - the current Document context\r\n* @param colorSchemeName - the name of the ColorScheme to get\r\n* @returns the ColorScheme with the given name\r\n*/\r\nexport function getColorSchemeFromDocument(\r\n    document: Spotfire.Dxp.Application.Document,\r\n    colorSchemeName: string\r\n): Spotfire.Dxp.Application.Visuals.ConditionalColoring.Coloring {\r\n    return document.ColoringTemplates.Item.get(colorSchemeName)!;\r\n}\r\n\r\n/*\r\n* searches the library with a given query string and returns the results\r\n* \r\n* @param application - the current application context\r\n* @param searchExpression - the query string to search the library with\r\n* @returns a collection of LibraryItems that match the search query\r\n*/\r\nexport function searchLibrary(\r\n    application: Spotfire.Dxp.Application.AnalysisApplication,\r\n    searchExpression: string\r\n): Spotfire.Dxp.Framework.Library.LibraryItemCollection {\r\n    if (!checkServerConnection(application)) {\r\n        throw new Error(\"Cannot access library when not connected to a server\");\r\n    }\r\n\r\n    const libraryManager = application.GetService(Spotfire.Dxp.Framework.Library.LibraryManager);\r\n    if (libraryManager == null || !libraryManager) {\r\n        throw new Error(\"LibraryManager service not available\");\r\n    }\r\n\r\n    return libraryManager.Search(\r\n        searchExpression,\r\n        Spotfire.Dxp.Framework.Library.LibraryItemRetrievalOption.IncludePath\r\n    );\r\n}", "\r\n/*\r\n* evaluates if a Marking with the given name exists in the document\r\n*\r\n* @param document - the current Document context\r\n* @param markingName - the name of the Marking to check for\r\n* @returns true if the Marking exists, false otherwise\r\n*/\r\nexport function markingExists(\r\n    document: Spotfire.Dxp.Application.Document,\r\n    markingName: string\r\n): boolean {\r\n    return document.Data.Markings.Contains(markingName);\r\n}\r\n\r\n/*\r\n* gets a Marking with the given name, creating it if it doesn't exist\r\n*\r\n* optionally accepts a `markingColor` to set the color of a created Marking. if\r\n*  the Marking already exists, the color will not be changed. if the Marking\r\n*  doesn't exist, and `markingColor` is not specified, the color will be\r\n*  managed by Spotfire.\r\n*\r\n* @param document - the current Document context\r\n* @param markingName - the name of the Marking to get or create\r\n* @param markingColor - optional. the color to set for the Marking\r\n* @returns the Marking with the given name\r\n*/\r\nexport function getOrCreateMarking(\r\n    document: Spotfire.Dxp.Application.Document,\r\n    markingName: string,\r\n    markingColor?: System.Drawing.Color\r\n): Spotfire.Dxp.Data.DataMarkingSelection {\r\n    if (markingExists(document, markingName)) {\r\n        return document.Data.Markings.Item.get(markingName)!;\r\n    }\r\n    const marking = document.Data.Markings.Add(markingName);\r\n    if (markingColor !== undefined) {\r\n        marking.Color = markingColor;\r\n    }\r\n    return marking;\r\n}\r\n\r\n/*\r\n* creates a new DataTable or replaces an existing one with a \"fresh\" copy of sourceTable\r\n*\r\n* @param document - Spotfire Document context\r\n* @param tableName - the name of the table to create\r\n* @param sourceTable - the DataTable to copy from\r\n* @returns the new table\r\n*/\r\nexport function createOrReplaceDataTable(\r\n    document: Spotfire.Dxp.Application.Document,\r\n    tableName: string,\r\n    sourceTable: Spotfire.Dxp.Data.DataSource\r\n): Spotfire.Dxp.Data.DataTable {\r\n    if (document.Data.Tables.Contains(tableName)) {\r\n        // safe to use ! here since we know the table exists\r\n        const existingTable = document.Data.Tables.Item.get(tableName)!;\r\n        document.Data.Tables.Remove(existingTable);\r\n    }\r\n    const newTable = document.Data.Tables.Add(tableName, sourceTable);\r\n    return newTable;\r\n}\r\n\r\n/*\r\n* tries to get a column by name from a data table, throws an error if it doesn't exist\r\n*\r\n* @param dataTable - the data table to search\r\n* @param columnName - the name of the column to find\r\n* @returns the column if it exists\r\n*/\r\nexport function getColumn(\r\n    dataTable: Spotfire.Dxp.Data.DataTable,\r\n    columnName: string\r\n): Spotfire.Dxp.Data.DataColumn {\r\n    const col = OutParam.create(Spotfire.Dxp.Data.DataColumn);\r\n    if (!dataTable.Columns.TryGetValue(columnName, col.out))\r\n        throw new Error(`Cannot find column '${columnName}' in table '${dataTable.Name}'.`);\r\n    return col;\r\n}", "import { getColorSchemeFromDocument, getColorSchemeFromLibrary, searchLibrary } from \"../utils/library\";\r\nimport { getOrCreateMarking } from \"../utils/data\";\r\n\r\nconst { LineChart, LabelOrientation, CategoryKey } = Spotfire.Dxp.Application.Visuals;\r\n\r\n\r\nconst MARKING_NAME = \"Marking\";\r\nconst CHART_TITLE = \"Zone Profiles\";\r\nconst XAXIS_EXPRESSION = \"<[Axis.Default.Names]>\";\r\nconst XAXIS_SCALE_ORIENTATION = LabelOrientation.Vertical;\r\nconst YAXIS_EXPRESSION = \"[CirclePct.Center], [CirclePct.Donut], [CirclePct.Edge], [SegmentPct.1],[SegmentPct.2],[SegmentPct.3],[SegmentPct.4],[SegmentPct.5],[SegmentPct.6], [MaskPct.1],  [MaskPct.2], [MaskPct.3], [MaskPct.4], [MaskPct.5], [MaskPct.6], [MaskPct.7], [MaskPct.8], [MaskPct.9]\";\r\nconst LINEBYAXIS_EXPRESSION = \"<[Wafer]>\";\r\nconst COLORAXIS_EXPRESSION = \"<Bin>\";\r\nconst COLORSCHEME_NAME = \"Bin Wafer Map Colors\";\r\nconst COLORSCHEME_PATH = \"/public/Demonstrations/Manufacturing/Zone Analysis & Commonality\";\r\nconst DATATABLE_NAME = \"Zone Profiles\";\r\n\r\n\r\nexport function createLinechart({ document, application }: CreateLinechartParameters) {\r\n    \r\n    // get the current page, or create a new one if one doesn't exist\r\n    const page = document.ActivePageReference ?? document.Pages.AddNew();\r\n\r\n    const dataTable = document.Data.Tables.Item.get(DATATABLE_NAME);\r\n    if (!dataTable) {\r\n        throw new Error(`Data Table not found: ${DATATABLE_NAME}`);\r\n    }\r\n    \r\n    // create a new LineChart\r\n    const lineChart = page.Visuals.AddNew(LineChart);\r\n\r\n    lineChart.Title = CHART_TITLE;\r\n\r\n    lineChart.Data.DataTableReference = dataTable;\r\n    lineChart.Data.MarkingReference = getOrCreateMarking(document, MARKING_NAME);\r\n        \r\n    lineChart.XAxis.Expression = XAXIS_EXPRESSION;\r\n    lineChart.XAxis.Scale.LabelOrientation = XAXIS_SCALE_ORIENTATION;\r\n    lineChart.YAxis.Expression = YAXIS_EXPRESSION;\r\n    \r\n    lineChart.LineByAxis.Expression = LINEBYAXIS_EXPRESSION;\r\n    \r\n    // set the color axis and set first Bin color to a light gray\r\n    // (keeping this as a fallback in case the color scheme is unavailable)\r\n    lineChart.ColorAxis.Expression = COLORAXIS_EXPRESSION;\r\n    const lightGray = System.Drawing.Color.FromArgb(255, 241, 241, 241);\r\n    lineChart.ColorAxis.Coloring.SetColorForCategory(new CategoryKey(1), lightGray);\r\n\r\n//TODO: this should probably be a function in library.ts\r\n    // attempt to apply color scheme\r\n    try {\r\n        const documentColorScheme = getColorSchemeFromDocument(document, COLORSCHEME_NAME);\r\n        lineChart.ColorAxis.Coloring.Apply(documentColorScheme.DisplayName);\r\n\r\n    } catch (noDocumentColorSchemeError) {\r\n        // scheme not found in the document; look in the library instead\r\n        try {\r\n            const libraryColorScheme = getColorSchemeFromLibrary(application, `/${COLORSCHEME_PATH}/${COLORSCHEME_NAME}`);\r\n            const documentColorScheme = document.ColoringTemplates.AddFromLibrary(libraryColorScheme);\r\n            lineChart.ColorAxis.Coloring.Apply(documentColorScheme.DisplayName);\r\n        } catch (libraryAccessError) {\r\n            // make one last attempt to search for the color scheme before giving up\r\n            try {\r\n                const searchExpression = `type:colorscheme title:\"${COLORSCHEME_NAME}\"`;\r\n                const results = searchLibrary(application, searchExpression);\r\n                const documentColorScheme = document.ColoringTemplates.AddFromLibrary(Array.from(results)[0]);\r\n                lineChart.ColorAxis.Coloring.Apply(documentColorScheme.DisplayName);\r\n            } catch (searchError) {\r\n                // we've tried everything we can; the color scheme simply ain't there \u00AF\\_(\u30C4)_/\u00AF\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nRegisterEntryPoint(createLinechart);\r\n"],
  "mappings": "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",
  "names": []
}
