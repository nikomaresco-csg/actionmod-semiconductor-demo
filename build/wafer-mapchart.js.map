{
  "version": 3,
  "sources": ["../src/utils/library.ts", "../src/scripts/wafer-mapchart.ts"],
  "sourcesContent": ["\r\n\r\n/*\r\n* attempts to verify that the Spotfire Analyst client is connected to a Spotfire Server\r\n*\r\n* @param application - the current application context\r\n* @returns true if the client is connected to a server, false otherwise\r\n*/\r\nexport function checkServerConnection(\r\n    application: Spotfire.Dxp.Application.AnalysisApplication\r\n): boolean {\r\n    const connectivityService = application.GetService(\r\n        Spotfire.Dxp.Framework.ApplicationModel.ConnectivityService\r\n    );\r\n    if (connectivityService == null || !connectivityService)\r\n        return false;\r\n    return connectivityService.IsOnline;\r\n}\r\n\r\n/*\r\n* attempts to get a LibraryItem with the given path and type from the Spotfire,\r\n* Library. throws an error if the item is not found.\r\n*\r\n* @param lm - the LibraryManager to use to look up the item. get with `application.GetService(LibraryManager)`\r\n* @param itemPath - the path to the item in the Library\r\n* @param itemType - the type of the item to look up\r\n* @returns the LibraryItem with the given path and type\r\n*/\r\nexport function getLibraryItem(\r\n    lm: Spotfire.Dxp.Framework.Library.LibraryManager,\r\n    itemPath: string,\r\n    itemType: Spotfire.Dxp.Framework.Library.LibraryItemType\r\n): Spotfire.Dxp.Framework.Library.LibraryItem {\r\n    const item = OutParam.create(Spotfire.Dxp.Framework.Library.LibraryItem);\r\n    if (!lm.TryGetItem(itemPath, itemType, item.out)) {\r\n        throw new Error(`Library item not found: ${itemPath}`);\r\n    }\r\n    return item;\r\n}\r\n\r\n/*\r\n* attempts to get a ColorScheme from the Spotfire Library with the given path\r\n*\r\n* @param application - the current application context\r\n* @param libraryPath - the path to the ColorScheme in the Library\r\n* @returns the ColorScheme with the given path\r\n*/\r\nexport function getColorSchemeFromLibrary(\r\n    application: Spotfire.Dxp.Application.AnalysisApplication,\r\n    libraryPath: string\r\n): Spotfire.Dxp.Framework.Library.LibraryItem {\r\n    if (!checkServerConnection(application)) {\r\n        throw new Error(\"Cannot access library when not connected to a server\");\r\n    }\r\n\r\n    const libraryManager = application.GetService(Spotfire.Dxp.Framework.Library.LibraryManager);\r\n    if (libraryManager == null || !libraryManager) {\r\n        throw new Error(\"LibraryManager service not available\");\r\n    }\r\n\r\n    return getLibraryItem(\r\n        libraryManager,\r\n        libraryPath,\r\n        Spotfire.Dxp.Framework.Library.LibraryItemType.ColorScheme\r\n    );\r\n}\r\n\r\n/*\r\n* attempts to get a ColorScheme from the current document with the given name\r\n*\r\n* @param document - the current Document context\r\n* @param colorSchemeName - the name of the ColorScheme to get\r\n* @returns the ColorScheme with the given name\r\n*/\r\nexport function getColorSchemeFromDocument(\r\n    document: Spotfire.Dxp.Application.Document,\r\n    colorSchemeName: string\r\n): Spotfire.Dxp.Application.Visuals.ConditionalColoring.Coloring {\r\n    return document.ColoringTemplates.Item.get(colorSchemeName)!;\r\n}\r\n\r\n/*\r\n* searches the library with a given query string and returns the results\r\n* \r\n* @param application - the current application context\r\n* @param searchExpression - the query string to search the library with\r\n* @returns a collection of LibraryItems that match the search query\r\n*/\r\nexport function searchLibrary(\r\n    application: Spotfire.Dxp.Application.AnalysisApplication,\r\n    searchExpression: string\r\n): Spotfire.Dxp.Framework.Library.LibraryItemCollection {\r\n    if (!checkServerConnection(application)) {\r\n        throw new Error(\"Cannot access library when not connected to a server\");\r\n    }\r\n\r\n    const libraryManager = application.GetService(Spotfire.Dxp.Framework.Library.LibraryManager);\r\n    if (libraryManager == null || !libraryManager) {\r\n        throw new Error(\"LibraryManager service not available\");\r\n    }\r\n\r\n    return libraryManager.Search(\r\n        searchExpression,\r\n        Spotfire.Dxp.Framework.Library.LibraryItemRetrievalOption.IncludePath\r\n    );\r\n}", "import { getColorSchemeFromDocument, getColorSchemeFromLibrary, searchLibrary } from \"../utils/library\";\r\n\r\nconst { MarkerClass, CategoryKey } = Spotfire.Dxp.Application.Visuals;\r\nconst { MapChart, MarkerLayerVisualization, Projection } = Spotfire.Dxp.Application.Visuals.Maps;\r\n\r\n\r\n// wafer mapchart configuration\r\nconst XAXIS_EXPRESSION = \"[Die X]\";\r\nconst YAXIS_EXPRESSION = \"[Die Y]\";\r\nconst COLORAXIS_EXPRESSION = \"Bin\";\r\nconst TRELLIS_PANEL_EXPRESSION = \"<[Wafer]>\";\r\nconst TRELLIS_ROWS_COUNT = 3;\r\nconst TRELLIS_COLS_COUNT = 7;\r\nconst CHART_TITLE = \"Wafer bin map\";\r\nconst MAP_MARKERLAYER_TITLE = \"die layer\";\r\nconst COLORSCHEME_NAME = \"Bin Wafer Map Colors\";\r\nconst COLORSCHEME_PATH = \"/public/Demonstrations/Manufacturing/Zone Analysis & Commonality\";\r\nconst DATATABLE_NAME = \"Big Wafer\"\r\n\r\n\r\nexport function createMapchart({\r\n    document,\r\n    application,\r\n}: CreateWaferMapchartParameters) {\r\n\r\n    // get the current page, or create a new one if one doesn't exist\r\n    const page = document.ActivePageReference ?? document.Pages.AddNew();\r\n\r\n    const dataTable = document.Data.Tables.Item.get(DATATABLE_NAME);\r\n    if (!dataTable) {\r\n        throw new Error(`Data Table not found: ${DATATABLE_NAME}`);\r\n    }\r\n\r\n    // create a new MapChart\r\n    const mapChart = page.Visuals.AddNew(MapChart);\r\n    mapChart.Layers.Clear();\r\n\r\n    mapChart.Title = CHART_TITLE;\r\n    mapChart.Projection = Projection.None;\r\n\r\n    // create and configure a marking layer\r\n    const markerLayer = OutParam.create(MarkerLayerVisualization);\r\n    mapChart.Layers.AddNewMarkerLayer(dataTable, markerLayer.out);\r\n    // need to autoconfigure or the layer will behave unexpectedly\r\n    markerLayer.AutoConfigure();\r\n\r\n    markerLayer.Title = MAP_MARKERLAYER_TITLE;\r\n    markerLayer.MarkerClass = MarkerClass.Tile;\r\n    //markerLayer.MarkerByAxis.Expression = `<[${DIE_X_COL_NAME}] NEST [${DIE_Y_COL_NAME}]>`;\r\n\r\n    // for whatever reason, the Projection property doesn't bubble up from\r\n    //  MapChartLayer to MapChartDataLayer/MarkerLayerVisualization, so we have\r\n    //  to get the layer as a regular Layer and set the Projection property there\r\n    const markerLayerAsRegularLayer = mapChart.Layers.Item.get(0)!;\r\n    markerLayerAsRegularLayer.Projection = Projection.None;\r\n\r\n    markerLayer.XAxis.Expression = XAXIS_EXPRESSION;\r\n    markerLayer.YAxis.Expression = YAXIS_EXPRESSION;\r\n\r\n    // set the color axis and set first Bin color to a light gray\r\n    // (keeping this as a fallback in case the color scheme is unavailable)\r\n    markerLayer.ColorAxis.Coloring.Clear();\r\n    markerLayer.ColorAxis.Expression = COLORAXIS_EXPRESSION;\r\n    const lightGray = System.Drawing.Color.FromArgb(255, 241, 241, 241);\r\n    markerLayer.ColorAxis.Coloring.SetColorForCategory(new CategoryKey(1), lightGray);\r\n\r\n    // this must be set after the markerLayer is created\r\n    // configure trellis properties\r\n    mapChart.Trellis.PanelAxis.Expression = TRELLIS_PANEL_EXPRESSION;\r\n    mapChart.Trellis.ManualLayout = true;\r\n    mapChart.Trellis.ManualRowCount = TRELLIS_ROWS_COUNT;\r\n    mapChart.Trellis.ManualColumnCount = TRELLIS_COLS_COUNT;\r\n\r\n    try {\r\n        const documentColorScheme = getColorSchemeFromDocument(document, COLORSCHEME_NAME);\r\n        markerLayer.ColorAxis.Coloring.Apply(documentColorScheme.DisplayName);\r\n\r\n    } catch (noDocumentColorSchemeError) {\r\n        // scheme not found in the document; look in the library instead\r\n        try {\r\n            const libraryColorScheme = getColorSchemeFromLibrary(application, `${COLORSCHEME_PATH}/${COLORSCHEME_NAME}`);\r\n            const documentColorScheme = document.ColoringTemplates.AddFromLibrary(libraryColorScheme);\r\n            markerLayer.ColorAxis.Coloring.Apply(documentColorScheme.DisplayName);\r\n        } catch (libraryAccessError) {\r\n            // make one last attempt to search for the color scheme before giving up\r\n            try {\r\n                const searchExpression = `type:colorscheme title:\"${COLORSCHEME_NAME}\"`;\r\n                const results = searchLibrary(application, searchExpression);\r\n                const documentColorScheme = document.ColoringTemplates.AddFromLibrary(Array.from(results)[0]);\r\n                markerLayer.ColorAxis.Coloring.Apply(documentColorScheme.DisplayName);\r\n            } catch (searchError) {\r\n                // we've tried everything we can; the color scheme simply ain't there \u00AF\\_(\u30C4)_/\u00AF\r\n            }\r\n        }\r\n    }\r\n    \r\n}\r\n\r\nRegisterEntryPoint(createMapchart);"],
  "mappings": "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",
  "names": []
}
